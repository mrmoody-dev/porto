{"ast":null,"code":"var _jsxFileName = \"C:\\\\laragon\\\\www\\\\porto\\\\src\\\\context\\\\ThemeContext.tsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useMemo, useEffect } from 'react';\n\n// Create a context for the theme\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ThemeContext = /*#__PURE__*/createContext({\n  theme: 'light',\n  toggleTheme: () => {}\n});\nexport const ThemeProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [theme, setTheme] = useState('light');\n  useEffect(() => {\n    // Apply the theme class to the body\n    document.body.className = theme + '-theme';\n  }, [theme]);\n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\n  };\n\n  // Memoize the context value to prevent unnecessary re-renders\n  const value = useMemo(() => ({\n    theme,\n    toggleTheme\n  }), [theme]);\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeProvider, \"gmzz0F6ofteSIj1EZYgu6ouTsFA=\");\n_c = ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","useMemo","useEffect","jsxDEV","_jsxDEV","ThemeContext","theme","toggleTheme","ThemeProvider","_ref","_s","children","setTheme","document","body","className","prevTheme","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/laragon/www/porto/src/context/ThemeContext.tsx"],"sourcesContent":["\nimport React, { createContext, useState, useMemo, useEffect } from 'react';\n\n// Create a context for the theme\nexport const ThemeContext = createContext({\n  theme: 'light',\n  toggleTheme: () => {},\n});\n\nexport const ThemeProvider = ({ children }: { children: React.ReactNode }) => {\n  const [theme, setTheme] = useState('light');\n\n  useEffect(() => {\n    // Apply the theme class to the body\n    document.body.className = theme + '-theme';\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme((prevTheme) => (prevTheme === 'light' ? 'dark' : 'light'));\n  };\n\n  // Memoize the context value to prevent unnecessary re-renders\n  const value = useMemo(() => ({ theme, toggleTheme }), [theme]);\n\n  return (\n    <ThemeContext.Provider value={value}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,SAAS,QAAQ,OAAO;;AAE1E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,YAAY,gBAAGN,aAAa,CAAC;EACxCO,KAAK,EAAE,OAAO;EACdC,WAAW,EAAEA,CAAA,KAAM,CAAC;AACtB,CAAC,CAAC;AAEF,OAAO,MAAMC,aAAa,GAAGC,IAAA,IAAiD;EAAAC,EAAA;EAAA,IAAhD;IAAEC;EAAwC,CAAC,GAAAF,IAAA;EACvE,MAAM,CAACH,KAAK,EAAEM,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,OAAO,CAAC;EAE3CE,SAAS,CAAC,MAAM;IACd;IACAW,QAAQ,CAACC,IAAI,CAACC,SAAS,GAAGT,KAAK,GAAG,QAAQ;EAC5C,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxBK,QAAQ,CAAEI,SAAS,IAAMA,SAAS,KAAK,OAAO,GAAG,MAAM,GAAG,OAAQ,CAAC;EACrE,CAAC;;EAED;EACA,MAAMC,KAAK,GAAGhB,OAAO,CAAC,OAAO;IAAEK,KAAK;IAAEC;EAAY,CAAC,CAAC,EAAE,CAACD,KAAK,CAAC,CAAC;EAE9D,oBACEF,OAAA,CAACC,YAAY,CAACa,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAN,QAAA,EACjCA;EAAQ;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACZ,EAAA,CApBWF,aAAa;AAAAe,EAAA,GAAbf,aAAa;AAAA,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}