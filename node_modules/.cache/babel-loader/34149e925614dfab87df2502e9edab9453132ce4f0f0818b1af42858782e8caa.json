{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useScrollAnimation.tsx\nimport { useEffect, useState, useRef } from \"react\";\nexport const useScrollAnimation = () => {\n  _s();\n  const [isVisible, setIsVisible] = useState(false);\n  const ref = useRef(null);\n  useEffect(() => {\n    const observer = new IntersectionObserver(_ref => {\n      let [entry] = _ref;\n      // Update our state when observer callback fires\n      if (entry.isIntersecting) {\n        setIsVisible(true);\n        observer.unobserve(entry.target);\n      }\n    }, {\n      root: null,\n      rootMargin: \"0px\",\n      threshold: 0.1 // Trigger when 10% of the element is visible\n    });\n    const currentRef = ref.current;\n    if (currentRef) {\n      observer.observe(currentRef);\n    }\n    return () => {\n      if (currentRef) {\n        observer.unobserve(currentRef);\n      }\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return [ref, isVisible];\n};\n_s(useScrollAnimation, \"7N8EcRPlcY6o9kzg5IgMZgWhyLI=\");\nexport default useScrollAnimation;","map":{"version":3,"names":["useEffect","useState","useRef","useScrollAnimation","_s","isVisible","setIsVisible","ref","observer","IntersectionObserver","_ref","entry","isIntersecting","unobserve","target","root","rootMargin","threshold","currentRef","current","observe"],"sources":["C:/laragon/www/porto/src/hooks/useScrollAnimation.tsx"],"sourcesContent":["// src/hooks/useScrollAnimation.tsx\r\nimport { useEffect, useState, useRef } from \"react\";\r\n\r\nexport const useScrollAnimation = <T extends HTMLElement>() => {\r\n  const [isVisible, setIsVisible] = useState(false);\r\n  const ref = useRef<T>(null);\r\n\r\n  useEffect(() => {\r\n    const observer = new IntersectionObserver(\r\n      ([entry]) => {\r\n        // Update our state when observer callback fires\r\n        if (entry.isIntersecting) {\r\n          setIsVisible(true);\r\n          observer.unobserve(entry.target);\r\n        }\r\n      },\r\n      {\r\n        root: null,\r\n        rootMargin: \"0px\",\r\n        threshold: 0.1, // Trigger when 10% of the element is visible\r\n      }\r\n    );\r\n\r\n    const currentRef = ref.current;\r\n    if (currentRef) {\r\n      observer.observe(currentRef);\r\n    }\r\n\r\n    return () => {\r\n      if (currentRef) {\r\n        observer.unobserve(currentRef);\r\n      }\r\n    };\r\n  }, []); // Empty array ensures that effect is only run on mount and unmount\r\n\r\n  return [ref, isVisible] as const;\r\n};\r\n\r\nexport default useScrollAnimation;\r\n"],"mappings":";AAAA;AACA,SAASA,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAEnD,OAAO,MAAMC,kBAAkB,GAAGA,CAAA,KAA6B;EAAAC,EAAA;EAC7D,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAMM,GAAG,GAAGL,MAAM,CAAI,IAAI,CAAC;EAE3BF,SAAS,CAAC,MAAM;IACd,MAAMQ,QAAQ,GAAG,IAAIC,oBAAoB,CACvCC,IAAA,IAAa;MAAA,IAAZ,CAACC,KAAK,CAAC,GAAAD,IAAA;MACN;MACA,IAAIC,KAAK,CAACC,cAAc,EAAE;QACxBN,YAAY,CAAC,IAAI,CAAC;QAClBE,QAAQ,CAACK,SAAS,CAACF,KAAK,CAACG,MAAM,CAAC;MAClC;IACF,CAAC,EACD;MACEC,IAAI,EAAE,IAAI;MACVC,UAAU,EAAE,KAAK;MACjBC,SAAS,EAAE,GAAG,CAAE;IAClB,CACF,CAAC;IAED,MAAMC,UAAU,GAAGX,GAAG,CAACY,OAAO;IAC9B,IAAID,UAAU,EAAE;MACdV,QAAQ,CAACY,OAAO,CAACF,UAAU,CAAC;IAC9B;IAEA,OAAO,MAAM;MACX,IAAIA,UAAU,EAAE;QACdV,QAAQ,CAACK,SAAS,CAACK,UAAU,CAAC;MAChC;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,OAAO,CAACX,GAAG,EAAEF,SAAS,CAAC;AACzB,CAAC;AAACD,EAAA,CAjCWD,kBAAkB;AAmC/B,eAAeA,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}